МЕТА

Розробка серверного програмного забезпечення для централізованого управління тренуваннями, інвентаризацією, інструкторами та моніторингу умов для забезпечення безпеки на гірськолижному курорті. Опис архітектурних рішень системи, взаємозв’язків її компонентів та загальної структури бази даних.
 
1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Система включає інтегроване рішення, що складається з IoT пристроїв, серверу, бази даних та мобільних і веб-додатків. IoT пристрої розгорнуті для моніторингу погодних умов та передають аналітичні дані на сервер через протокол HTTP. Сервер, побудований на основі ASP.NET Core з використанням EF Core для ORM, служить центральним вузлом для обробки даних і управління бізнес-логікою. Він використовує JWT для безпечної аутентифікації та авторизації, і також підтримує серверну локалізацію для авторизованих користувачів. Погодні дані, траси, інвентарі та інформація про користувачів зберігаються у базі даних. Система включає ендпоінт, який отримує дані від IoT пристроїв і розповсюджує події з відповідними метаданими в інші частини системи. Мобільний додаток дозволяє користувачам здійснювати бронювання та взаємодіяти з системою, тоді як веб-додаток функціонує як рекламна платформа та адміністративний інтерфейс. Сервер підтримує три ролі користувачів: адміністратор, інструктор та гість.
Адміністратор може створювати та видаляти акаунти тренерів, керувати інвентарями та їх обладнанням, керувати трасами, оновлювати дані про ділянки траси, оновлювати базовий рівень небезпеки і коефіцієнтні фактори впливу різних типів непогоди для кожної ділянки. Адміністратор також може керувати тренуваннями.
Роль інструктора передбачає резервування обладнання з інвентарів, створення та закінчення тренувань.
Роль гостя передбачає процес реєстрації акаунту і бронювання місць.
Всі ролі можуть міняти налаштування профілю: загальну інформацію та мову локалізації.
 
2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Розгортання передбачає встановлення пристроїв IoT, які відстежують погодні умови та передають дані на серверний сервер через Інтернет за допомогою HTTP. Внутрішній сервер, отримує ці дані через визначену кінцеву точку. Отримавши дані, сервер обробляє їх, зберігає в базі даних за допомогою TCP підключення і запускає відповідні події з метаданими іншим компонентам системи. Мобільний додаток, встановлений на пристроях користувачів, зв’язується з внутрішнім сервером через RESTful API, щоб дозволити користувачам робити бронювання та отримувати доступ до даних про погоду. Веб-програма взаємодіє з внутрішнім сервером, щоб забезпечити адміністративні функції та рекламний вміст, також використовуючи безпечний RESTful API.
 
3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Серверної частини є модульною, багатошаровою системою, спроектованою для забезпечення чіткого розподілу відповідальності та підтримуваності. Вона складається з чотирьох основних шарів: Core, Application, Infrastructure та API.
Шар Core визначає основні абстракції бізнес логіки та бізнес-правил, що керують застосунком, а також основні події, які управляють хореографією  застосунку.
Шар Application відповідає за управління логікою застосунку, а також реагування на події, обробку винятків та надання основних сервісів і розширень, які підтримують функціональність застосунку.
Шар Infrastructure зосереджений на технічних аспектах доступу до даних і зберігання, управління взаємодією з базами даних, системами обміну повідомленнями (шини даних) та інтеграцією із зовнішніми сервісами. Це забезпечує, щоб основна логіка залишалася незалежною від деталей збереження даних.
API-шар обробляє зовнішній інтерфейс застосунку, керуючи тим, як клієнти взаємодіють з сервером. Він складається з кількох компонентів, таких як управління залежностями, властивості, атрибути та контролери, які визначають кінцеві точки застосунку. Цей шар також включає розширення для додаткових функцій, фонову обробку і картографування для перетворення даних між шарами. Моделі визначають структури даних, що використовуються API, а опції дозволяють налаштовувати параметри. Шар також містить компоненти для управління токенами та рівнем доступу користувачів. Загальні конфігурації централізовані у файлах, таких як appsettings.json, ApiDefaults.cs.
 
4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Система підтримує має весь базовий функціонал для забезпечення основних бізнес процесів для керування, моніторингу та організації безпеки на гірськолижному курорті.
Для доступу до функціоналу користувача, потрібно спочатку пройти процес реєстрації та аунтефікації для гостей, або тільки аунтефікації для персоналу.
Адміністратор системи може керувати інвентаризацією (створення, видалення, оновлення інвентарів та їх наповнення), керувати інструкторами (створювати акаунти з автоматично згенерованими тимчасовими паролями та видаляти їх), керувати трасами та їх ділянками (створювати, оновлювати та видаляти траси, а також ділянки), керувати тренуваннями і може відміняти бронювання звичайних користувачів.
Інструктор може резервувати ресурси з інвентарів для проведення тренування, також переглядати доступні траси та ініціювати тренування.
Гість може реєструватись в системі, переглядати доступні тренування а також бронювати та відміняти бронювання на тренування.
 
5 ПОБУДОВА ER-ДІАГРАМИ

Для побудови ефективної системи треба спочатку розробити головні галузеві типи даних, які будуть відповідати за представлення тих чи інших галузевих понять. Для розробки серверної частини використовується мова С# (фреймворк ASP.NET Core), тому сутності в системі будуть представлені класами мови С#.
Головними сутностями системи є користувач, траса, тренування та бронювання.
Тип «Користувач» відповідає за загальне представлення користувача в системі, незважаючі на рівень доступу до системних функцій. Тип має ідентифікатор числового типу, а також загальну інформацію про користувача, таких як мова, пошта, ім’я і тд..
Тип «Адміністратор» є підтипом типу «Користувач» (зв’язок один до одного) та відображає набір додаткових характеристик, які характерні саме для адміністратора, а саме роль адміністратора.
Тип «Інструктор» є підтипом типу «Користувач» (зв’язок один до одного) та відображає набір додаткових характеристик, які характерні саме для інструктора, а саме досвід в тренуваннях і роль інструктора.
Тип «Гість» є підтипом типу «Користувач» (зв’язок один до одного) та відображає набір додаткових характеристик, які характерні саме для гостя, а саме рівень членства та роль гостя.
Тип «Траса» є самостійним типом та представляє поняття траси, має назву траси, первинний ключ і набір секцій траси.
Тип «Секція» є залежним типом від «Траси» (зв’язок один до багатьох), існує тільки в межах траси та представляє поняття секції або регіону з певними відмінностями коефіцієнтів впливу певних типів погоди, має інформацію про базовий рівень небезпеки, викривлення в градусах, первинного ідентифікатора та назви. 
Тип «Тренування» є залежним типом від «Траси» (зв’язок багато до одного) та «Інструктор» (зв’язок багато до одного), бо тренування може проходити лише на трасі і тільки під наглядом інструктора. Тип має первинний ідентифікатор, інформацію про трасу, інструктора, набір «Бронювань» (зв’язок один до багатьох) та набір «Рівнів навичок».
Тип «Рівень навичок» є типом перерахування та містить три значення: початківець, впевнений, професіонал.
Тип «Бронювання» є залежним типом від «Тренування» (зв’язок багато до одного) та «Гість» (зв’язок багато до одного), має первинний ідентифікатор, інформацію про гостя, сесію тренування, дату створення та дату скасування, а також флагове значення «скасований».
Тип «Інвентар» є самостійним типом, представляє поняття інвентарю та має первинний ключ, назву інвентарю і набір предметів інвентарю.
Тип «Предмет інвентарю» є залежним типом від типу «Інвентар» (багато до одного) і існує в межах інвентаря. Має первинний ключ, набір «Тренувань» в яких предмет зарезервовано (зв’язок багато до багатьох), назву а також набір довільних атрибутів, які представлені структурою «Атрибут», яка має назву атрибуту та значення атрибуту.

6 СПЕЦИФІКАЦІЯ REST

GET /backoffice/inventories - Retrieve all inventories 

POST /backoffice/inventories - Create a new inventory 
GET /backoffice/inventories/{id} - Retrieve a specific inventory by ID 
PUT /backoffice/inventories/{id}/items - Update items in a specific inventory by inventory ID 
DELETE /backoffice/inventories/{id}/items/{itemId} - Delete a specific item by item ID from a specific inventory by inventory ID

GET /backoffice/tracks - Retrieve all tracks 
POST /backoffice/tracks - Create a new track 
GET /backoffice/tracks/{id} - Retrieve a specific track by ID 
DELETE /backoffice/tracks/{id} - Delete a specific track by ID

GET /backoffice/trainings - Retrieve all training sessions POST /backoffice/trainings - Create a new training session GET /backoffice/trainings/{id} - Retrieve a specific training session by ID DELETE /backoffice/trainings/{id} - Delete a specific training session by ID PUT /backoffice/trainings/{id}/reserve - Reserve a specific training session by ID

GET /bookings - Retrieve all bookings
GET /bookings/{trainingId} - Retrieve bookings by training ID 
PATCH /bookings/{bookingId} - Update a specific booking by booking ID
POST /account/authenticate - Authenticate a guest account 
POST /account/register - Register a new guest account 
POST /account/confirm-email - Confirm the email of a guest account 
GET /account - Retrieve account details
GET /backoffice/instructors - Retrieve all instructors 
POST /backoffice/instructors - Create a new instructor 
GET /backoffice/instructors/{id} - Retrieve a specific instructor by ID 
DELETE /backoffice/instructors/{id} - Delete a specific instructor by ID
IotCommunication: 
POST /communications/iot - Send an IoT communication

7 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

Головним пакетом системи є Core.Features, це пакет який відповідають за абстракцію бізнес логіки, декларування бізнес правил та головних сутностей.
Рівень бізнес логіки представлено пакетами Application.Services та Application.EventHandling, ці пакети відповідають за виконання бізнес логіки та за оркестрування стану системи.
Рівень взаємодії з даними представлено пакетами Infrastructure.Data, Infrastructure.Repositories, Infrastructure.Services та Infrastructure.Messaging. Ці пакети відповідають за доступ до даних в базі і за публікацію подій наскрізь системи.
Рівень інтерфейсу системи представлено пакетами API.DI та API.Controllers. API.DI ¬– інверсія контроля, API.Controllers – обробка вхідних і вихідних даних з-за поза меж системи.

ПЕРЕЛІК ВИКОРИСТАНИХ ДЖЕРЕЛ

1.	Демо відео https://www.youtube.com/watch?v=7mSxUFoNWCw

